; -*- mode: clojure; -*-
; vim: filetype=clojure

(logging/init {:file "riemann.log"})

; Listen on the local interface over TCP (5555), UDP (5555), and websockets
; (5556)
(let [host "0.0.0.0"]
  (tcp-server {:host host})
  (udp-server {:host host})
  (ws-server  {:host host}))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; run a graphite server
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(def graphite-server-tcp (
   graphite-server :host "0.0.0.0"
                   :port 2004
                   :protocol :tcp
                   :parser-fn
   (fn [{:keys [service] :as event}]
     (let [[source environment hostname metricname] (clojure.string/split service #"\." 4)]
       {
        :host (clojure.string/replace hostname #"_" ".")
        :service metricname
        :metric (:metric event)
        :tags [source, environment]
        :time (:time event)
        :ttl 30}))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; set of severity functions - Use for alerting escalation!
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn severity
  [severity message & children]
  (fn [e] ((apply with {:state severity :description message} children) e)))

(def informational (partial severity "informational"))
(def normal (partial severity "normal"))
(def warning (partial severity "warning"))
(def minor (partial severity "minor"))
(def major (partial severity "major"))
(def critical (partial severity "critical"))

; Expire old events from the index every 60 seconds.
(periodically-expire 60)

(let [index (index)]
  ; All streams go here
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;  Time window example
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (streams
    ; set the TTL to 1 second longer than the window - no TTL causes Java NPE
    (default :ttl 11
      (where (and (service #"web_hit_404$") (not (expired? event))) 
        (fixed-time-window 10
          (combine riemann.folds/sum
            (where (> metric 5.0)
              (fn [event] (warn "WEB_404s" event)))
  
  )))))
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;  Go off when a metric hits a certain point
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (streams 
    (default :ttl 10
      (where (and (service #"^.+cpu\-idle") (not (expired? event)))
         ;(fn [event] (info "inside CPU" event))
         (where (< metric 20)
           (fn [event] (warn "CPU is hit hard" event))))
  ))
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;  Handle expired events 
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (streams
    ;prn
    (default :ttl 60
      ; Index all events immediately.
      index

      ; Log expired events.
      (expired
        ; we'll always get cpu-0.cpu-idle from any machine running collectd, so it will act as our heartbeat
        (match :service "cpu-0.cpu-idle"
        (fn [event] (info "expired" event)))
        
        )))
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
)

